var FieldState;!function(t){t[t.Unset=0]="Unset",t[t.Alive=1]="Alive",t[t.Dead=2]="Dead"}(FieldState||(FieldState={}));class GameField extends HTMLElement{constructor(){super()}connectedCallback(){window.onresize=(()=>this.viewportUpdated()),document.querySelector("#setSize").addEventListener("click",t=>this.buttonClickedHandler("setSize")),this.columns=parseInt(this.getAttribute("width"),10),this.rows=parseInt(this.getAttribute("height"),10),this.columns=Math.max(10,this.columns),this.rows=Math.max(10,this.rows),this.gameField=this.createGameField(),this.setViewportValues();const t=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows);this.attachShadow({mode:"open"}),this.updateShadowDom(t),this.viewportUpdated()}disconnectedCallback(){}adoptedCallback(){}attributeChangedCallback(t,e,i){}static get observedAttributes(){return[]}createGameField(){const t=[];for(let e=0;e<this.rows;e++){t[e]=[];for(let i=0;i<this.columns;i++)t[e][i]=FieldState.Unset}return t}updateShadowDom(t){this.shadowRoot.innerHTML=this.createShadowCss(t);const e=this.createShadowGameField();this.shadowRoot.appendChild(e)}setViewportValues(){this.viewportWidth=Math.min(document.documentElement.clientWidth,window.innerWidth),this.viewportHeight=Math.min(document.documentElement.clientHeight,window.innerHeight)}createShadowGameField(){const t=document.createElement("div");t.className+="grid";for(let e=0;e<this.rows;e++){const i=document.createElement("div");i.className+="row";for(let t=0;t<this.columns;t++){const s=document.createElement("div");s.setAttribute("row",e.toString()),s.setAttribute("column",t.toString()),s.className+="box",s.addEventListener("click",i=>this.fieldClickedHandler(e,t)),i.appendChild(s)}t.appendChild(i)}return t}fieldClickedHandler(t,e){}createShadowCss(t){return`<style>\n    .box {\n      box-sizing: border-box;\n      width: ${t}px;\n      height: ${t}px;\n      background-color: white;\n      float: left;\n      background-clip: content-box;\n      padding: 1px;\n    }\n\n    .row {\n      box-sizing: border-box;\n      width: ${t*this.columns}px;\n      height: ${t}px;\n      clear: both;\n      float: left;\n    }\n\n    .grid {\n      box-sizing: border-box;\n      width: ${t*this.columns}px;\n      height: ${t*this.rows}px;\n    }`}buttonClickedHandler(t){switch(t){case"setSize":this.sizeUpdated()}}sizeUpdated(){this.columns=parseInt(document.getElementById("width").value,10),this.rows=parseInt(document.getElementById("height").value,10),this.columns=Math.max(10,this.columns),this.rows=Math.max(10,this.rows),document.getElementById("width").value=this.columns.toString(),document.getElementById("height").value=this.rows.toString(),this.gameField=this.createGameField();const t=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows);this.updateShadowDom(t),this.viewportUpdated()}viewportUpdated(){this.setViewportValues();const t=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows);let e={};(e=this.shadowRoot.styleSheets[0]).cssRules[0].style.width=`${t}px`,e.cssRules[0].style.height=`${t}px`,e.cssRules[1].style.width=`${t*this.columns}px`,e.cssRules[1].style.height=`${t}px`,e.cssRules[2].style.width=`${t*this.columns}px`,e.cssRules[2].style.height=`${t*this.rows}px`}}window.customElements.define("cgol-pitch",GameField);