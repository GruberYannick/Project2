var FieldState;!function(e){e[e.Unset=0]="Unset",e[e.Alive=1]="Alive",e[e.Dead=2]="Dead"}(FieldState||(FieldState={}));class GameField extends HTMLElement{constructor(){super(),this.columns=60,this.rows=25,this.size=0,this.viewportWidth=0,this.viewportHeight=0,this.gameField=[],this.mouseDown=!1,this.running=!1,this.generation=1,this.initialized=!1}connectedCallback(){window.onresize=(()=>this.viewportUpdated()),this.gameField=this.createGameField(),this.setViewportValues(),this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows),this.attachShadow({mode:"open"}),this.createShadowDom(),this.viewportUpdated(),this.initialized=!0}attributeChangedCallback(e,t,i){if(this.initialized)switch(e){case"width":i!==t&&i!==this.columns&&(this.columns=Math.max(10,i),this.widthUpdated());break;case"height":i!==t&&i!==this.rows&&(this.rows=Math.max(10,i),this.heightUpdated());break;case"start":this.start();break;case"pause":this.pause();break;case"clear":this.clear()}}static get observedAttributes(){return["width","height","start","pause","clear"]}createGameField(){const e=[];for(let t=0;t<this.rows;t++){e[t]=[];for(let i=0;i<this.columns;i++)e[t][i]=FieldState.Unset}return e}widthUpdated(){this.dispatchEvent(new CustomEvent("widthUpdatedEvent",{detail:this.columns})),this.sizeUpdated()}heightUpdated(){this.dispatchEvent(new CustomEvent("heightUpdatedEvent",{detail:this.rows})),this.sizeUpdated()}sizeUpdated(){this.gameField=this.createGameField(),this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows),this.createShadowDom(),this.viewportUpdated()}setViewportValues(){this.viewportWidth=Math.min(document.documentElement.clientWidth,window.innerWidth),this.viewportHeight=Math.min(document.documentElement.clientHeight,window.innerHeight)}viewportUpdated(){this.setViewportValues(),this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows);let e={};(e=this.shadowRoot.styleSheets[0]).cssRules[0].style.width=`${this.size}px`,e.cssRules[0].style.height=`${this.size}px`,e.cssRules[1].style.width=`${this.size*this.columns}px`,e.cssRules[1].style.height=`${this.size}px`,e.cssRules[2].style.width=`${this.size*this.columns}px`,e.cssRules[2].style.height=`${this.size*this.rows}px`}createShadowDom(){this.shadowRoot.innerHTML=this.createShadowCss();const e=this.createShadowGameField();this.shadowRoot.appendChild(e)}createShadowCss(){return`<style>\n    .cell {\n      box-sizing: border-box;\n      width: ${this.size}px;\n      height: ${this.size}px;\n      background-color: white;\n      float: left;\n      background-clip: content-box;\n      padding: 1px;\n    }\n\n    .row {\n      box-sizing: border-box;\n      width: ${this.size*this.columns}px;\n      height: ${this.size}px;\n      clear: both;\n      float: left;\n    }\n\n    .grid {\n      box-sizing: border-box;\n      width: ${this.size*this.columns}px;\n      height: ${this.size*this.rows}px;\n      margin: auto;\n    }\n\n    .unset {\n      background-color: white;\n    }\n\n    .alive {\n      background-color: darkblue;\n    }\n\n    .dead {\n      background-color: lightgreen;\n    }\n    `}createShadowGameField(){const e=document.createElement("div");e.className="grid";for(let t=0;t<this.rows;t++){const i=document.createElement("div");i.className="row";for(let e=0;e<this.columns;e++){const s=document.createElement("div");switch(s.setAttribute("id",`${t},${e}`),this.gameField[t][e]){case FieldState.Unset:s.className="cell unset";break;case FieldState.Alive:s.className="cell alive";break;case FieldState.Dead:s.className="cell dead"}s.addEventListener("mouseover",()=>this.cellHoveredHandler(t,e)),s.addEventListener("mousedown",()=>this.cellDownHandler(t,e)),s.addEventListener("mouseup",()=>this.cellUpHandler()),s.addEventListener("touchstart",()=>this.cellTouchedHandler(t,e)),i.appendChild(s)}e.addEventListener("mousedown",()=>this.fieldDownHandler()),e.addEventListener("mouseup",()=>this.fieldUpHandler()),e.appendChild(i)}return e}start(){this.running||(this.running=!0,this.execute())}pause(){this.running=!1}clear(){this.running=!1,this.gameField=this.createGameField(),this.generation=1,this.dispatchEvent(new CustomEvent("generationUpdatedEvent",{detail:this.generation})),this.updateField()}execute(){if(this.running){const e=this.calculateNextGenerationGameField();this.gameField=e,this.updateField(),this.generation++,this.dispatchEvent(new CustomEvent("generationUpdatedEvent",{detail:this.generation})),setTimeout(function(){this.execute()}.bind(this),0)}}calculateNextGenerationGameField(){const e=this.createGameField();let t=0;for(let i=0;i<this.rows;i++)for(let s=0;s<this.columns;s++)e[i][s]=this.calculateNextGenerationCell(i,s),e[i][s]!==this.gameField[i][s]&&t++;return 0===t&&this.pause(),e}calculateNextGenerationCell(e,t){const i=this.countAliveNeighbours(e,t);return this.gameField[e][t]===FieldState.Alive?i<=1?FieldState.Dead:i>=4?FieldState.Dead:FieldState.Alive:3===i?FieldState.Alive:this.gameField[e][t]}countAliveNeighbours(e,t){let i=0;for(let s=-1;s<=1;s++)for(let a=-1;a<=1;a++){const n=(e+s+this.rows)%this.rows,l=(t+a+this.columns)%this.columns;this.gameField[n][l]===FieldState.Alive&&i++}return this.gameField[e][t]===FieldState.Alive&&i--,i}updateField(){for(let e=0;e<this.rows;e++)for(let t=0;t<this.columns;t++){const i=this.shadowRoot.getElementById(`${e},${t}`);this.gameField[e][t]===FieldState.Unset?i.setAttribute("class","cell unset"):this.gameField[e][t]===FieldState.Alive?i.setAttribute("class","cell alive"):this.gameField[e][t]===FieldState.Dead&&i.setAttribute("class","cell dead")}}cellTouchedHandler(e,t){this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}cellDownHandler(e,t){this.mouseDown=!0,this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}fieldDownHandler(){this.mouseDown=!0}cellUpHandler(){this.mouseDown=!1}fieldUpHandler(){this.mouseDown=!1}cellHoveredHandler(e,t){this.mouseDown&&this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}}window.customElements.define("cgol-pitch",GameField);