var FieldState;!function(e){e[e.Unset=0]="Unset",e[e.Alive=1]="Alive",e[e.Dead=2]="Dead"}(FieldState||(FieldState={}));class GameField extends HTMLElement{constructor(){super(),this.columns=60,this.rows=25,this.size=0,this.viewportWidth=0,this.viewportHeight=0,this.gameField=[],this.mouseDown=!1,this.running=!1,this.generation=1,this.initialized=!1,this.speed=0,this.unsetColor="#ffffff",this.aliveColor="#00008b",this.deadColor="#90ee90"}connectedCallback(){window.onresize=(()=>this.viewportUpdated()),this.gameField=this.createGameField(),this.setViewportValues(),this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows),this.attachShadow({mode:"open"}),this.createShadowDom(),this.initialized=!0}attributeChangedCallback(e,t,i){if(this.initialized)switch(e){case"width":this.widthUpdated(i);break;case"height":this.heightUpdated(i);break;case"start":this.doStart();break;case"pause":this.doPause();break;case"clear":this.doClear();break;case"level":this.loadLevel(i);break;case"random":this.randomize();break;case"speed":this.speedUpdated(i);break;case"unset_color":this.unsetColorUpdated(i);break;case"alive_color":this.aliveColorUpdated(i);break;case"dead_color":this.deadColorUpdated(i)}}static get observedAttributes(){return["width","height","start","pause","clear","level","random","speed","unset_color","alive_color","dead_color"]}createGameField(){const e=[];for(let t=0;t<this.rows;t++){e[t]=[];for(let i=0;i<this.columns;i++)e[t][i]=FieldState.Unset}return e}widthUpdated(e){const t=parseInt(e,10);if(!isNaN(t)){const e=Math.max(10,t);e!==this.columns&&(this.columns=e,this.sizeUpdated())}this.dispatchEvent(new CustomEvent("widthUpdatedEvent",{detail:this.columns}))}heightUpdated(e){const t=parseInt(e,10);if(!isNaN(t)){const e=Math.max(10,t);e!==this.rows&&(this.rows=e,this.sizeUpdated())}this.dispatchEvent(new CustomEvent("heightUpdatedEvent",{detail:this.rows}))}speedUpdated(e){const t=parseInt(e,10);isNaN(t)||t!==this.speed&&(this.speed=t),this.dispatchEvent(new CustomEvent("speedUpdatedEvent",{detail:this.speed}))}sizeUpdated(){this.gameField=this.createGameField(),this.generation=1,this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows),this.createShadowDom(),this.dispatchEvent(new CustomEvent("generationUpdatedEvent",{detail:this.generation}))}unsetColorUpdated(e){this.unsetColor=e,this.updateShadowCss()}aliveColorUpdated(e){this.aliveColor=e,this.updateShadowCss()}deadColorUpdated(e){this.deadColor=e,this.updateShadowCss()}updateShadowCss(){const e=this.shadowRoot;Array.from(e.childNodes).forEach(e=>{"STYLE"===e.nodeName&&(e.textContent=`\n        .cell {\n          box-sizing: border-box;\n          width: ${this.size}px;\n          height: ${this.size}px;\n          background-color: white;\n          float: left;\n          background-clip: content-box;\n          padding: 1px;\n        }\n\n        .row {\n          box-sizing: border-box;\n          width: ${this.size*this.columns}px;\n          height: ${this.size}px;\n          clear: both;\n          float: left;\n        }\n\n        .grid {\n          box-sizing: border-box;\n          width: ${this.size*this.columns}px;\n          height: ${this.size*this.rows}px;\n          margin: auto;\n        }\n\n        .unset {\n          background-color: ${this.unsetColor};\n        }\n\n        .alive {\n          background-color: ${this.aliveColor};\n        }\n\n        .dead {\n          background-color: ${this.deadColor};\n        }\n        `)})}setViewportValues(){this.viewportWidth=Math.min(document.documentElement.clientWidth,window.innerWidth),this.viewportHeight=Math.min(document.documentElement.clientHeight,window.innerHeight)}viewportUpdated(){this.setViewportValues(),this.size=Math.min(this.viewportWidth/this.columns,this.viewportHeight/this.rows);let e={};(e=this.shadowRoot.styleSheets[0]).cssRules[0].style.width=`${this.size}px`,e.cssRules[0].style.height=`${this.size}px`,e.cssRules[1].style.width=`${this.size*this.columns}px`,e.cssRules[1].style.height=`${this.size}px`,e.cssRules[2].style.width=`${this.size*this.columns}px`,e.cssRules[2].style.height=`${this.size*this.rows}px`}createShadowDom(){this.shadowRoot.innerHTML=this.createShadowCss();const e=this.createShadowGameField();this.shadowRoot.appendChild(e),this.viewportUpdated()}createShadowCss(){return`<style>\n    .cell {\n      box-sizing: border-box;\n      width: ${this.size}px;\n      height: ${this.size}px;\n      background-color: white;\n      float: left;\n      background-clip: content-box;\n      padding: 1px;\n    }\n\n    .row {\n      box-sizing: border-box;\n      width: ${this.size*this.columns}px;\n      height: ${this.size}px;\n      clear: both;\n      float: left;\n    }\n\n    .grid {\n      box-sizing: border-box;\n      width: ${this.size*this.columns}px;\n      height: ${this.size*this.rows}px;\n      margin: auto;\n    }\n\n    .unset {\n      background-color: ${this.unsetColor};\n    }\n\n    .alive {\n      background-color: ${this.aliveColor};\n    }\n\n    .dead {\n      background-color: ${this.deadColor};\n    }\n    </style>\n    `}createShadowGameField(){const e=document.createElement("div");e.className="grid";for(let t=0;t<this.rows;t++){const i=document.createElement("div");i.className="row";for(let e=0;e<this.columns;e++){const s=document.createElement("div");switch(s.setAttribute("id",`${t},${e}`),this.gameField[t][e]){case FieldState.Unset:s.className="cell unset";break;case FieldState.Alive:s.className="cell alive";break;case FieldState.Dead:s.className="cell dead"}s.addEventListener("mouseover",()=>this.cellHoveredHandler(t,e)),s.addEventListener("mousedown",()=>this.cellDownHandler(t,e)),s.addEventListener("mouseup",()=>this.cellUpHandler()),s.addEventListener("touchstart",()=>this.cellTouchedHandler(t,e)),i.appendChild(s)}e.addEventListener("mousedown",()=>this.fieldDownHandler()),e.addEventListener("mouseup",()=>this.fieldUpHandler()),e.appendChild(i)}return e}doStart(){this.running||(this.running=!0,this.dispatchEvent(new CustomEvent("runningStartedEvent",{detail:this.running})),this.execute())}doPause(){this.running=!1,this.dispatchEvent(new CustomEvent("runningStoppedEvent",{detail:this.running}))}doClear(){this.running=!1,this.gameField=this.createGameField(),this.generation=1,this.updateField(),this.dispatchEvent(new CustomEvent("generationUpdatedEvent",{detail:this.generation})),this.dispatchEvent(new CustomEvent("runningStoppedEvent",{detail:this.running}))}loadLevel(e){const t=e.split("\n"),i=t.length;let s=0;for(let e=0;e<t.length;e++)t[e]=t[e].replace(/\s/g,""),s=Math.max(s,t[e].length);this.heightUpdated(i.toString()),this.widthUpdated(s.toString()),this.doClear();for(let e=0;e<t.length;e++){t[e]+="0".repeat(s-t[e].length);for(let i=0;i<s;i++)parseInt(t[e][i],10)===FieldState.Alive?this.gameField[e][i]=FieldState.Alive:this.gameField[e][i]=FieldState.Unset}this.createShadowDom()}randomize(){this.doClear();for(let e=0;e<this.rows;e++)for(let t=0;t<this.columns;t++)this.gameField[e][t]=Math.round(Math.random());this.updateField()}execute(){if(this.running){const e=this.calculateNextGenerationGameField();this.gameField=e,this.updateField(),this.generation++,this.dispatchEvent(new CustomEvent("generationUpdatedEvent",{detail:this.generation})),setTimeout(function(){this.execute()}.bind(this),this.speed)}}calculateNextGenerationGameField(){const e=this.createGameField();let t=0;for(let i=0;i<this.rows;i++)for(let s=0;s<this.columns;s++)e[i][s]=this.calculateNextGenerationCell(i,s),e[i][s]!==this.gameField[i][s]&&t++;return 0===t&&this.doPause(),e}calculateNextGenerationCell(e,t){const i=this.countAliveNeighbours(e,t);return this.gameField[e][t]===FieldState.Alive?i<=1?FieldState.Dead:i>=4?FieldState.Dead:FieldState.Alive:3===i?FieldState.Alive:this.gameField[e][t]}countAliveNeighbours(e,t){let i=0;for(let s=-1;s<=1;s++)for(let n=-1;n<=1;n++){const a=(e+s+this.rows)%this.rows,d=(t+n+this.columns)%this.columns;this.gameField[a][d]===FieldState.Alive&&i++}return this.gameField[e][t]===FieldState.Alive&&i--,i}updateField(){for(let e=0;e<this.rows;e++)for(let t=0;t<this.columns;t++){const i=this.shadowRoot.getElementById(`${e},${t}`);this.gameField[e][t]===FieldState.Unset?i.setAttribute("class","cell unset"):this.gameField[e][t]===FieldState.Alive?i.setAttribute("class","cell alive"):this.gameField[e][t]===FieldState.Dead&&i.setAttribute("class","cell dead")}}cellTouchedHandler(e,t){this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}cellDownHandler(e,t){this.mouseDown=!0,this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}fieldDownHandler(){this.mouseDown=!0}cellUpHandler(){this.mouseDown=!1}fieldUpHandler(){this.mouseDown=!1}cellHoveredHandler(e,t){this.mouseDown&&this.gameField[e][t]!==FieldState.Alive&&(this.gameField[e][t]=FieldState.Alive,this.updateField())}}window.customElements.define("cgol-pitch",GameField);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
