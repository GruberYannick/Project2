var FieldState;
(function (FieldState) {
    FieldState[FieldState["Unset"] = 0] = "Unset";
    FieldState[FieldState["Alive"] = 1] = "Alive";
    FieldState[FieldState["Dead"] = 2] = "Dead";
})(FieldState || (FieldState = {}));
class GameField extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        window.onresize = () => this.viewportUpdated();
        document.querySelector("#setSize").addEventListener("click", (e) => this.buttonClickedHandler("setSize"));
        this.columns = parseInt(this.getAttribute("width"), 10);
        this.rows = parseInt(this.getAttribute("height"), 10);
        this.columns = Math.max(10, this.columns);
        this.rows = Math.max(10, this.rows);
        this.gameField = this.createGameField();
        this.setViewportValues();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        this.attachShadow({ mode: "open" });
        this.updateShadowDom(size);
        this.viewportUpdated();
    }
    disconnectedCallback() {
        return;
    }
    adoptedCallback() {
        return;
    }
    attributeChangedCallback(name, oldValue, newValue) {
        return;
    }
    static get observedAttributes() {
        return [];
    }
    createGameField() {
        const arr = [];
        for (let i = 0; i < this.rows; i++) {
            arr[i] = [];
            for (let j = 0; j < this.columns; j++) {
                arr[i][j] = FieldState.Unset;
            }
        }
        return arr;
    }
    updateShadowDom(size) {
        this.shadowRoot.innerHTML = this.createShadowCss(size);
        const gridElem = this.createShadowGameField();
        this.shadowRoot.appendChild(gridElem);
    }
    setViewportValues() {
        this.viewportWidth = Math.min(document.documentElement.clientWidth, window.innerWidth);
        this.viewportHeight = Math.min(document.documentElement.clientHeight, window.innerHeight);
    }
    createShadowGameField() {
        const gridElem = document.createElement("div");
        gridElem.className += "grid";
        for (let row = 0; row < this.rows; row++) {
            const rowElem = document.createElement("div");
            rowElem.className += "row";
            for (let column = 0; column < this.columns; column++) {
                const boxElem = document.createElement("div");
                boxElem.setAttribute("row", row.toString());
                boxElem.setAttribute("column", column.toString());
                boxElem.className += "box";
                boxElem.addEventListener("click", (e) => this.fieldClickedHandler(row, column));
                rowElem.appendChild(boxElem);
            }
            gridElem.appendChild(rowElem);
        }
        return gridElem;
    }
    fieldClickedHandler(row, column) {
        return;
    }
    createShadowCss(size) {
        return `<style>
    .box {
      box-sizing: border-box;
      width: ${size}px;
      height: ${size}px;
      background-color: white;
      float: left;
      background-clip: content-box;
      padding: 1px;
    }

    .row {
      box-sizing: border-box;
      width: ${size * this.columns}px;
      height: ${size}px;
      clear: both;
      float: left;
    }

    .grid {
      box-sizing: border-box;
      width: ${size * this.columns}px;
      height: ${size * this.rows}px;
    }`;
    }
    buttonClickedHandler(id) {
        switch (id) {
            case "setSize":
                this.sizeUpdated();
                break;
            default:
                break;
        }
    }
    sizeUpdated() {
        this.columns = parseInt(document.getElementById("width").value, 10);
        this.rows = parseInt(document.getElementById("height").value, 10);
        this.columns = Math.max(10, this.columns);
        this.rows = Math.max(10, this.rows);
        document.getElementById("width").value = this.columns.toString();
        document.getElementById("height").value = this.rows.toString();
        this.gameField = this.createGameField();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        this.updateShadowDom(size);
        this.viewportUpdated();
    }
    viewportUpdated() {
        this.setViewportValues();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        const styleSheets = this.shadowRoot.styleSheets;
        let styleSheet = {};
        styleSheet = styleSheets[0];
        // .box
        styleSheet["cssRules"][0].style.width = `${size}px`;
        styleSheet["cssRules"][0].style.height = `${size}px`;
        // .row
        styleSheet["cssRules"][1].style.width = `${size * this.columns}px`;
        styleSheet["cssRules"][1].style.height = `${size}px`;
        // .grid
        styleSheet["cssRules"][2].style.width = `${size * this.columns}px`;
        styleSheet["cssRules"][2].style.height = `${size * this.rows}px`;
    }
}
window.customElements.define("cgol-pitch", GameField);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
