class GameField extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        window.onresize = () => this.viewportUpdated();
        document.querySelector("#setSize").addEventListener("click", (e) => this.buttonClickedHandler("setSize"));
        this.columns = parseInt(this.getAttribute("width"), 10);
        this.rows = parseInt(this.getAttribute("height"), 10);
        this.columns = Math.max(10, this.columns);
        this.rows = Math.max(10, this.rows);
        this.setViewportValues();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        this.attachShadow({ mode: "open" });
        this.shadowRoot.innerHTML = this.createShadowCss(size);
        const gridElem = this.createShadowGameField();
        this.shadowRoot.appendChild(gridElem);
    }
    disconnectedCallback() {
        console.log("2 Custom square element added to page.");
    }
    adoptedCallback() {
        console.log("3 Custom square element added to page.");
    }
    attributeChangedCallback(name, oldValue, newValue) {
        console.log("4 Custom square element added to page.");
    }
    static get observedAttributes() {
        return ["columns", "rows"];
    }
    setViewportValues() {
        this.viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        this.viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    }
    createShadowGameField() {
        const gridElem = document.createElement("div");
        gridElem.className += "grid";
        for (let row = 0; row < this.rows; row++) {
            const rowElem = document.createElement("div");
            rowElem.className += "row";
            for (let column = 0; column < this.columns; column++) {
                const boxElem = document.createElement("div");
                boxElem.className += "box";
                rowElem.appendChild(boxElem);
            }
            gridElem.appendChild(rowElem);
        }
        return gridElem;
    }
    createShadowCss(size) {
        return `<style>
    .box {
      box-sizing: border-box;
      width: ${size}px;
      height: ${size}px;
      background-color: red;
      float: left;
      background-clip: content-box;
      padding: 1px;
    }

    .row {
      box-sizing: border-box;
      width: ${size * this.columns}px;
      height: ${size}px;
      clear: both;
      float: left;
    }

    .grid {
      box-sizing: border-box;
      width: ${size * this.columns}px;
      height: ${size * this.rows}px;
      margin: auto;
    }`;
    }
    buttonClickedHandler(id) {
        switch (id) {
            case "setSize":
                this.sizeUpdated();
                break;
            default:
                break;
        }
    }
    sizeUpdated() {
        this.columns = parseInt(document.getElementById("width").value, 10);
        this.rows = parseInt(document.getElementById("height").value, 10);
        this.columns = Math.max(10, this.columns);
        this.rows = Math.max(10, this.rows);
        document.getElementById("width").value = this.columns.toString();
        document.getElementById("height").value = this.rows.toString();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        this.shadowRoot.innerHTML = this.createShadowCss(size);
        const gridElem = this.createShadowGameField();
        this.shadowRoot.appendChild(gridElem);
    }
    viewportUpdated() {
        this.setViewportValues();
        const size = Math.min(this.viewportWidth / this.columns, this.viewportHeight / this.rows);
        const styleSheets = this.shadowRoot.styleSheets;
        let styleSheet = {};
        styleSheet = styleSheets[0];
        // .box
        styleSheet["cssRules"][0].style.width = `${size}px`;
        styleSheet["cssRules"][0].style.height = `${size}px`;
        // .row
        styleSheet["cssRules"][1].style.width = `${size * this.columns}px`;
        styleSheet["cssRules"][1].style.height = `${size}px`;
        // .grid
        styleSheet["cssRules"][2].style.width = `${size * this.columns}px`;
        styleSheet["cssRules"][2].style.height = `${size * this.rows}px`;
    }
}
window.customElements.define("cgol-pitch", GameField);

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QTZCLEVBQUUsQ0FBQztRQUM5QyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTVCLE9BQU87UUFDUCxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO1FBQ3BELFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUM7UUFFckQsT0FBTztRQUNQLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQztRQUNuRSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDO1FBRXJELFFBQVE7UUFDUixVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUM7UUFDbkUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ25FLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQyIsImZpbGUiOiJnYW1lRmllbGQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBHYW1lRmllbGQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIHByaXZhdGUgY29sdW1uczogbnVtYmVyO1xuICBwcml2YXRlIHJvd3M6IG51bWJlcjtcblxuICBwcml2YXRlIHZpZXdwb3J0V2lkdGg6IG51bWJlcjtcbiAgcHJpdmF0ZSB2aWV3cG9ydEhlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgd2luZG93Lm9ucmVzaXplID0gKCkgPT4gdGhpcy52aWV3cG9ydFVwZGF0ZWQoKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NldFNpemVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB0aGlzLmJ1dHRvbkNsaWNrZWRIYW5kbGVyKFwic2V0U2l6ZVwiKSk7XG5cbiAgICB0aGlzLmNvbHVtbnMgPSBwYXJzZUludCh0aGlzLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpLCAxMCk7XG4gICAgdGhpcy5yb3dzID0gcGFyc2VJbnQodGhpcy5nZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiksIDEwKTtcblxuICAgIHRoaXMuY29sdW1ucyA9IE1hdGgubWF4KDEwLCB0aGlzLmNvbHVtbnMpO1xuICAgIHRoaXMucm93cyA9IE1hdGgubWF4KDEwLCB0aGlzLnJvd3MpO1xuXG4gICAgdGhpcy5zZXRWaWV3cG9ydFZhbHVlcygpO1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLm1pbih0aGlzLnZpZXdwb3J0V2lkdGggLyB0aGlzLmNvbHVtbnMsIHRoaXMudmlld3BvcnRIZWlnaHQgLyB0aGlzLnJvd3MpO1xuXG4gICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiBcIm9wZW5cIiB9KTtcbiAgICB0aGlzLnNoYWRvd1Jvb3QuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVTaGFkb3dDc3Moc2l6ZSk7XG5cbiAgICBjb25zdCBncmlkRWxlbSA9IHRoaXMuY3JlYXRlU2hhZG93R2FtZUZpZWxkKCk7XG4gICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKGdyaWRFbGVtKTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zb2xlLmxvZyhcIjIgQ3VzdG9tIHNxdWFyZSBlbGVtZW50IGFkZGVkIHRvIHBhZ2UuXCIpO1xuICB9XG5cbiAgcHVibGljIGFkb3B0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zb2xlLmxvZyhcIjMgQ3VzdG9tIHNxdWFyZSBlbGVtZW50IGFkZGVkIHRvIHBhZ2UuXCIpO1xuICB9XG5cbiAgcHVibGljIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lOiBhbnksIG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZyhcIjQgQ3VzdG9tIHNxdWFyZSBlbGVtZW50IGFkZGVkIHRvIHBhZ2UuXCIpO1xuICB9XG5cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogYW55IHtcbiAgICByZXR1cm4gW1wiY29sdW1uc1wiLCBcInJvd3NcIl07XG4gIH1cblxuICBwcml2YXRlIHNldFZpZXdwb3J0VmFsdWVzKCkge1xuICAgIHRoaXMudmlld3BvcnRXaWR0aCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgdGhpcy52aWV3cG9ydEhlaWdodCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlU2hhZG93R2FtZUZpZWxkKCkge1xuICAgIGNvbnN0IGdyaWRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBncmlkRWxlbS5jbGFzc05hbWUgKz0gXCJncmlkXCI7XG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5yb3dzOyByb3crKykge1xuICAgICAgY29uc3Qgcm93RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICByb3dFbGVtLmNsYXNzTmFtZSArPSBcInJvd1wiO1xuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgdGhpcy5jb2x1bW5zOyBjb2x1bW4rKykge1xuICAgICAgICBjb25zdCBib3hFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYm94RWxlbS5jbGFzc05hbWUgKz0gXCJib3hcIjtcbiAgICAgICAgcm93RWxlbS5hcHBlbmRDaGlsZChib3hFbGVtKTtcbiAgICAgIH1cbiAgICAgIGdyaWRFbGVtLmFwcGVuZENoaWxkKHJvd0VsZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBncmlkRWxlbTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlU2hhZG93Q3NzKHNpemU6IG51bWJlcikge1xuICAgIHJldHVybiBgPHN0eWxlPlxuICAgIC5ib3gge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIHdpZHRoOiAke3NpemV9cHg7XG4gICAgICBoZWlnaHQ6ICR7c2l6ZX1weDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgYmFja2dyb3VuZC1jbGlwOiBjb250ZW50LWJveDtcbiAgICAgIHBhZGRpbmc6IDFweDtcbiAgICB9XG5cbiAgICAucm93IHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB3aWR0aDogJHtzaXplICogdGhpcy5jb2x1bW5zfXB4O1xuICAgICAgaGVpZ2h0OiAke3NpemV9cHg7XG4gICAgICBjbGVhcjogYm90aDtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgIH1cblxuICAgIC5ncmlkIHtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICB3aWR0aDogJHtzaXplICogdGhpcy5jb2x1bW5zfXB4O1xuICAgICAgaGVpZ2h0OiAke3NpemUgKiB0aGlzLnJvd3N9cHg7XG4gICAgICBtYXJnaW46IGF1dG87XG4gICAgfWA7XG4gIH1cblxuICBwcml2YXRlIGJ1dHRvbkNsaWNrZWRIYW5kbGVyKGlkOiBzdHJpbmcpIHtcbiAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICBjYXNlIFwic2V0U2l6ZVwiOlxuICAgICAgICB0aGlzLnNpemVVcGRhdGVkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzaXplVXBkYXRlZCgpIHtcbiAgICB0aGlzLmNvbHVtbnMgPSBwYXJzZUludCgoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWR0aFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSwgMTApO1xuICAgIHRoaXMucm93cyA9IHBhcnNlSW50KChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlaWdodFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSwgMTApO1xuXG4gICAgdGhpcy5jb2x1bW5zID0gTWF0aC5tYXgoMTAsIHRoaXMuY29sdW1ucyk7XG4gICAgdGhpcy5yb3dzID0gTWF0aC5tYXgoMTAsIHRoaXMucm93cyk7XG5cbiAgICAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWR0aFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9IHRoaXMuY29sdW1ucy50b1N0cmluZygpO1xuICAgIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlaWdodFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9IHRoaXMucm93cy50b1N0cmluZygpO1xuXG4gICAgY29uc3Qgc2l6ZSA9IE1hdGgubWluKHRoaXMudmlld3BvcnRXaWR0aCAvIHRoaXMuY29sdW1ucywgdGhpcy52aWV3cG9ydEhlaWdodCAvIHRoaXMucm93cyk7XG5cbiAgICB0aGlzLnNoYWRvd1Jvb3QuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVTaGFkb3dDc3Moc2l6ZSk7XG5cbiAgICBjb25zdCBncmlkRWxlbSA9IHRoaXMuY3JlYXRlU2hhZG93R2FtZUZpZWxkKCk7XG4gICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKGdyaWRFbGVtKTtcbiAgfVxuXG4gIHByaXZhdGUgdmlld3BvcnRVcGRhdGVkKCkge1xuICAgIHRoaXMuc2V0Vmlld3BvcnRWYWx1ZXMoKTtcblxuICAgIGNvbnN0IHNpemUgPSBNYXRoLm1pbih0aGlzLnZpZXdwb3J0V2lkdGggLyB0aGlzLmNvbHVtbnMsIHRoaXMudmlld3BvcnRIZWlnaHQgLyB0aGlzLnJvd3MpO1xuXG4gICAgY29uc3Qgc3R5bGVTaGVldHMgPSB0aGlzLnNoYWRvd1Jvb3Quc3R5bGVTaGVldHM7XG4gICAgbGV0IHN0eWxlU2hlZXQ6IHsgW2luZGV4OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgIHN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0c1swXTtcblxuICAgIC8vIC5ib3hcbiAgICBzdHlsZVNoZWV0W1wiY3NzUnVsZXNcIl1bMF0uc3R5bGUud2lkdGggPSBgJHtzaXplfXB4YDtcbiAgICBzdHlsZVNoZWV0W1wiY3NzUnVsZXNcIl1bMF0uc3R5bGUuaGVpZ2h0ID0gYCR7c2l6ZX1weGA7XG5cbiAgICAvLyAucm93XG4gICAgc3R5bGVTaGVldFtcImNzc1J1bGVzXCJdWzFdLnN0eWxlLndpZHRoID0gYCR7c2l6ZSAqIHRoaXMuY29sdW1uc31weGA7XG4gICAgc3R5bGVTaGVldFtcImNzc1J1bGVzXCJdWzFdLnN0eWxlLmhlaWdodCA9IGAke3NpemV9cHhgO1xuXG4gICAgLy8gLmdyaWRcbiAgICBzdHlsZVNoZWV0W1wiY3NzUnVsZXNcIl1bMl0uc3R5bGUud2lkdGggPSBgJHtzaXplICogdGhpcy5jb2x1bW5zfXB4YDtcbiAgICBzdHlsZVNoZWV0W1wiY3NzUnVsZXNcIl1bMl0uc3R5bGUuaGVpZ2h0ID0gYCR7c2l6ZSAqIHRoaXMucm93c31weGA7XG4gIH1cbn1cblxud2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShcImNnb2wtcGl0Y2hcIiwgR2FtZUZpZWxkKTtcbiJdfQ==
